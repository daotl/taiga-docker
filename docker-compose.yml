version: "3.5"

x-environment:
  &default-back-environment
  # Database settings
  POSTGRES_DB: taiga
  POSTGRES_USER: taiga
  POSTGRES_PASSWORD: taiga
  POSTGRES_HOST: taiga-db
  # Taiga settings
  TAIGA_SECRET_KEY: "taiga-back-secret-key"
  TAIGA_SITES_SCHEME: "http"
  TAIGA_SITES_DOMAIN: "localhost:9000"
  TAIGA_SUBPATH: "" # "" or "/subpath"
  # Email settings. Uncomment following lines and configure your SMTP server
  # EMAIL_BACKEND: "django.core.mail.backends.smtp.EmailBackend"
  # DEFAULT_FROM_EMAIL: "no-reply@example.com"
  # EMAIL_USE_TLS: "False"
  # EMAIL_USE_SSL: "False"
  # EMAIL_HOST: "smtp.host.example.com"
  # EMAIL_PORT: 587
  # EMAIL_HOST_USER: "user"
  # EMAIL_HOST_PASSWORD: "password"
  # Rabbitmq settings
  # Should be the same as in taiga-async-rabbitmq and taiga-events-rabbitmq
  RABBITMQ_USER: taiga
  RABBITMQ_PASS: taiga
  # Telemetry settings
  ENABLE_TELEMETRY: "True"
  # OpenID settings, see: https://github.com/daotl/taiga-contrib-openid-auth
  # Enable OpenID to allow to register users if they do not exist. Set to false to disable all signups
  PUBLIC_REGISTER_ENABLED: "True"

x-openid-environment:
  &openid-environment
  # OpenID settings
  ENABLE_OPENID: "True"
  OPENID_URL : "https://{OpenID API Path}/auth"
  OPENID_USER_URL : "https://{OpenID API Path}/userinfo"
  OPENID_TOKEN_URL : "https://{OpenID API Path}/oauth2/token"
  OPENID_CLIENT_ID : "<Client ID>"
  OPENID_CLIENT_SECRET : "<Client Secret>"
  OPENID_NAME: "Name you want to give your openid provider e.g keycloak"
  # OpenID optional settings
  # OPENID_ID_FIELD = "sub"
  # OPENID_USERNAME_FIELD = "preferred_username"
  # OPENID_FULLNAME_FIELD = "name"
  # OPENID_EMAIL_FIELD = "email"
  # OPENID_SCOPE="openid email"

x-volumes:
  &default-back-volumes
  - taiga-static-data:/taiga-back/static
  - taiga-media-data:/taiga-back/media
  # - ./config.py:/taiga-back/settings/config.py


services:
  taiga-db:
    image: postgres:13.5
    environment:
      POSTGRES_DB: taiga
      POSTGRES_USER: taiga
      POSTGRES_PASSWORD: taiga
    volumes:
      - taiga-db-data:/var/lib/postgresql/data
    networks:
      - taiga

  taiga-back:
    image: daotl/taiga-back-openid:6.4.2
    environment:
      <<: *default-back-environment
      <<: *openid-environment
    volumes: *default-back-volumes
    networks:
      - taiga
    depends_on:
      - taiga-db
      - taiga-events-rabbitmq
      - taiga-async-rabbitmq

  taiga-async:
    image: daotl/taiga-back-openid:6.4.2
    entrypoint: ["/taiga-back/docker/async_entrypoint.sh"]
    environment:
      <<: *default-back-environment
      <<: *openid-environment
    volumes: *default-back-volumes
    networks:
      - taiga
    depends_on:
      - taiga-db
      - taiga-back
      - taiga-async-rabbitmq

  taiga-async-rabbitmq:
    image: rabbitmq:3.8-management-alpine
    environment:
      RABBITMQ_ERLANG_COOKIE: secret-erlang-cookie
      RABBITMQ_DEFAULT_USER: taiga
      RABBITMQ_DEFAULT_PASS: taiga
      RABBITMQ_DEFAULT_VHOST: taiga
    volumes:
      - taiga-async-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - taiga

  taiga-front:
    image: daotl/taiga-front-openid:6.4.2
    environment:
      <<: *openid-environment
      TAIGA_URL: "http://localhost:9000"
      TAIGA_WEBSOCKETS_URL: "ws://localhost:9000"
      TAIGA_SUBPATH: "" # "" or "/subpath"
    networks:
      - taiga
    # volumes:
    #   - ./conf.json:/usr/share/nginx/html/conf.json

  taiga-events:
    image: taigaio/taiga-events:6.4.0
    environment:
      RABBITMQ_USER: taiga
      RABBITMQ_PASS: taiga
      TAIGA_SECRET_KEY: "taiga-back-secret-key"
    networks:
      - taiga
    depends_on:
      - taiga-events-rabbitmq

  taiga-events-rabbitmq:
    image: rabbitmq:3.8-management-alpine
    environment:
      RABBITMQ_ERLANG_COOKIE: secret-erlang-cookie
      RABBITMQ_DEFAULT_USER: taiga
      RABBITMQ_DEFAULT_PASS: taiga
      RABBITMQ_DEFAULT_VHOST: taiga
    volumes:
      - taiga-events-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - taiga

  taiga-protected:
    image: taigaio/taiga-protected:6.4.0
    environment:
      MAX_AGE: 360
      SECRET_KEY: "taiga-back-secret-key"
    networks:
      - taiga

  taiga-gateway:
    image: nginx:1.21-alpine
    ports:
      - "9000:80"
    volumes:
      - ./taiga-gateway/taiga.conf:/etc/nginx/conf.d/default.conf
      - taiga-static-data:/taiga/static
      - taiga-media-data:/taiga/media
    networks:
      - taiga
    depends_on:
      - taiga-front
      - taiga-back
      - taiga-events

volumes:
  taiga-static-data:
    driver_opts:
      type: none
      device: ${TAIGA_VOLUMES_ROOT}/static
      o: bind
  taiga-media-data:
    driver_opts:
      type: none
      device: ${TAIGA_VOLUMES_ROOT}/media
      o: bind
  taiga-db-data:
    driver_opts:
      type: none
      device: ${TAIGA_VOLUMES_ROOT}/postgres
      o: bind
  taiga-async-rabbitmq-data:
    driver_opts:
      type: none
      device: ${TAIGA_VOLUMES_ROOT}/async-rabbitmq
      o: bind
  taiga-events-rabbitmq-data:
    driver_opts:
      type: none
      device: ${TAIGA_VOLUMES_ROOT}/events-rabbitmq
      o: bind

networks:
  taiga:
